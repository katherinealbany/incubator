###################################################################################################

kind: StatefulSet
apiVersion: "{{ .Values.apiVersionStatefulSet }}"
metadata:
  name: "{{ template "elasticsearchDataName" . }}"
  namespace: "{{ template "elasticsearchNamespace" . }}"
  labels:
    name: "{{ template "elasticsearchDataName" . }}"
    chart: "{{ template "elasticsearchChart" . }}"
    release: "{{ template "elasticsearchRelease" . }}"
    heritage: "{{ template "elasticsearchHeritage" . }}"
    node.data: "{{ .Values.dataConfigNodeData }}"
    node.ingest: "{{ .Values.dataConfigNodeIngest }}"
    node.master: "{{ .Values.dataConfigNodeMaster }}"
  annotations:
    config.sha256sum: "{{ include (print .Template.BasePath "/data-config-map.yaml") . | sha256sum }}"
spec:
  selector:
    matchLabels:
      name: "{{ template "elasticsearchDataName" . }}"
  replicas: {{ .Values.dataReplicas }}
  serviceName: "{{ template "elasticsearchClusterName" . }}"
  {{- if .Values.dataVolumeEnabled }}
  volumeClaimTemplates:
    - metadata:
        name: "{{ .Values.dataVolumeName }}"
        annotations:
          volume.alpha.kubernetes.io/storage-class: "{{ .Values.dataVolumeClass }}"
      spec:
        resources:
          requests:
            storage: "{{ .Values.dataVolumeSize }}"
        accessModes: [ "{{ .Values.dataVolumeMode }}" ]
  {{- end }}
  template:
    metadata:
      labels:
        name: "{{ template "elasticsearchDataName" . }}"
        chart: "{{ template "elasticsearchChart" . }}"
        release: "{{ template "elasticsearchRelease" . }}"
        heritage: "{{ template "elasticsearchHeritage" . }}"
        node.data: "{{ .Values.dataConfigNodeData }}"
        node.ingest: "{{ .Values.dataConfigNodeIngest }}"
        node.master: "{{ .Values.dataConfigNodeMaster }}"
        {{- if .Values.dataPodLabels }}
{{ toYaml .Values.dataPodLabels | indent 8 }}
        {{- end }}
      {{- if .Values.dataPodAnnotations }}
      annotations:
{{ toYaml .Values.dataPodAnnotations | indent 8 }}
      {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          {{- if eq (.Values.dataPodAntiAffinity | lower) "required" }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "{{ .Values.dataPodAntiAffinityTopologyKey }}"
              labelSelector:
                matchExpressions:
                  - key: name
                    values: [ "{{ template "elasticsearchDataName" . }}" ]
                    operator: In
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.dataPodAntiAffinityWeight }}
              podAffinityTerm:
                topologyKey: "{{ .Values.dataPodAntiAffinityTopologyKey }}"
                labelSelector:
                  matchExpressions:
                    - key: name
                      values: [ "{{ template "elasticsearchDataName" . }}" ]
                      operator: In
          {{- end }}
      {{- if or (ge (default 0 (.Values.clusterFsGroup | int)) 0) (ge (default 0 (.Values.clusterRunAsUser | int)) 0) }}
      securityContext:
        {{- if ge (default 0 (.Values.clusterFsGroup | int)) 0 }}
        fsGroup: {{ .Values.clusterFsGroup }}
        {{- end }}
        {{- if ge (default 0 (.Values.clusterRunAsUser | int)) 0 }}
        runAsUser: {{ .Values.clusterRunAsUser }}
        {{- end }}
      {{- end }}
      {{- if .Values.dataPodNodeSelector }}
      nodeSelector:
{{ toYaml .Values.dataPodNodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.dataPodTolerations }}
      tolerations:
{{ toYaml .Values.dataPodTolerations | indent 8 }}
      {{- end }}
      volumes:
        - name: "{{ .Values.configWord }}"
          configMap:
            name: "{{ template "elasticsearchDataName" . }}"
        {{- if not .Values.dataVolumeEnabled }}
        - name: "{{ .Values.dataVolumeName }}"
          emptyDir: {}
        {{- end }}
      {{- if .Values.dataPodVolumes }}
{{ toYaml .Values.dataPodVolumes | indent 8 }}
      {{- end }}
      initContainers:
        - name: init
          image: "{{ template "elasticsearchClusterImage" . }}"
          imagePullPolicy: "{{ .Values.clusterImagePullPolicy }}"
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: {{ .Values.dataAllowPrivilegeEscalation }}
          command:
            - /bin/bash
            - -c
            - mkdir -pv {{ template "elasticsearchDataDataBase" . }} &&
              mkdir -pv {{ template "elasticsearchDataLogsBase" . }} &&
              chown -cR {{ .Values.clusterRunAsUser }}:{{ .Values.clusterFsGroup }} {{ template "elasticsearchDataDataBase" . }} &&
              chown -cR {{ .Values.clusterRunAsUser }}:{{ .Values.clusterFsGroup }} {{ template "elasticsearchDataLogsBase" . }}
          volumeMounts:
            - name: "{{ .Values.dataVolumeName }}"
              mountPath: "{{ .Values.dataVolumeMountBase }}"
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ template "elasticsearchClusterImage" . }}"
          imagePullPolicy: "{{ .Values.clusterImagePullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: {{ .Values.dataAllowPrivilegeEscalation }}
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: "{{ .Values.httpWord }}"
              containerPort: {{ .Values.clusterHttpPort }}
            - name: "{{ .Values.clusterWord }}"
              containerPort: {{ .Values.clusterTransportPort }}
          {{- if or .Values.dataCpu .Values.dataCpuMinimum .Values.dataCpuMaximum .Values.dataMemory .Values.dataMemoryMinimum .Values.dataMemoryMaximum }}
          resources:
            {{- if or .Values.dataCpu .Values.dataCpuMinimum .Values.dataMemory .Values.dataMemoryMinimum }}
            requests:
              {{- if or .Values.dataCpu .Values.dataCpuMinimum }}
              cpu: "{{ if .Values.dataCpu }}{{ .Values.dataCpu }}{{ else }}{{ .Values.dataCpuMinimum }}{{ end }}"
              {{- end }}
              {{- if or .Values.dataMemory .Values.dataMemoryMinimum }}
              memory: "{{ if .Values.dataMemory }}{{ .Values.dataMemory }}{{ else }}{{ .Values.dataMemoryMinimum }}{{ end }}"
              {{- end }}
            {{- end }}
            {{- if or .Values.dataCpu .Values.dataCpuMaximum .Values.dataMemory .Values.dataMemoryMaximum }}
            limits:
              {{- if or .Values.dataCpu .Values.dataCpuMaximum }}
              cpu: "{{ if .Values.dataCpu }}{{ .Values.dataCpu }}{{ else }}{{ .Values.dataCpuMaximum }}{{ end }}"
              {{- end }}
              {{- if or .Values.dataMemory .Values.dataMemoryMaximum }}
              memory: "{{ if .Values.dataMemory }}{{ .Values.dataMemory }}{{ else }}{{ .Values.dataMemoryMaximum }}{{ end }}"
              {{- end }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: "{{ .Values.configWord }}"
              subPath: "{{ .Values.jvmFile }}"
              mountPath: "{{ template "elasticsearchConfigMountBase" . }}/{{ .Values.jvmFile }}"
            - name: "{{ .Values.configWord }}"
              subPath: "{{ .Values.log4jFile }}"
              mountPath: "{{ template "elasticsearchConfigMountBase" . }}/{{ .Values.log4jFile }}"
            - name: "{{ .Values.configWord }}"
              subPath: "{{ .Values.configFile }}"
              mountPath: "{{ template "elasticsearchConfigMountBase" . }}/{{ .Values.configFile }}"
            - name: "{{ .Values.dataVolumeName }}"
              mountPath: "{{ .Values.dataVolumeMountBase }}"
          {{- if .Values.dataPodVolumeMounts }}
{{ toYaml .Values.dataPodVolumeMounts | indent 12 }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.clusterReadinessProbeHttpPath }}"
              port: "{{ .Values.httpWord }}"
            periodSeconds: {{ .Values.dataReadinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.dataReadinessProbeTimeoutSeconds }}
            successThreshold: {{ .Values.dataReadinessProbeSuccessThreshold }}
            failureThreshold: {{ .Values.dataReadinessProbeFailureThreshold }}
          livenessProbe:
            tcpSocket:
              port: "{{ .Values.clusterWord }}"
            periodSeconds: {{ .Values.dataLivenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.dataLivenessProbeTimeoutSeconds }}
            successThreshold: {{ .Values.dataLivenessProbeSuccessThreshold }}
            failureThreshold: {{ .Values.dataLivenessProbeFailureThreshold }}
            initialDelaySeconds: {{ .Values.dataLivenessProbeInitialDelaySeconds }}

###################################################################################################
